package teste;

import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFrame;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Panel;

import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Canvas;



public class Janela {

	private JFrame frmTeste;
	private JPanel panel= new JPanel();
	private JLabel pathfolder = new JLabel();
	
	//private JTextField textField;
	//private JTextField textField_1;
	private int grid = 0;
	

	/**
	 * Launch the application.
	 * @throws IOException 
	 */

	
	
	
	public void sendToClientOutput(DataOutputStream output,String msg,DataInputStream input) throws IOException {
		
		
		if (msg.substring(0, 7).equals("getfile")) {
			
			String path = msg.split(":")[1];
			
			output.writeUTF("getfile");
			output.writeUTF(path);
			pathfolder.setText(path);
			
			
			String filestringreceived = "";
			String files = "";
			
			while(true) {
				filestringreceived = input.readUTF();
				
				if(filestringreceived.equals("/getfile>")) {
					break;
				}
					
				
				files = files + "/" + filestringreceived ;
				
				//System.out.println(files);
				
				
				
			}
			
			panel.removeAll();
			panel.revalidate();
			panel.repaint();
			
			
			String file[] = files.split("/");
			
			int framegrid = 0;
			
			for (String filename : file) {
				System.out.println(filename);
				
			
				
				JButton btn = new JButton(filename);
				btn.setBounds(0, framegrid, 500, 30);
				
				btn.addMouseListener(new MouseAdapter() {
					@Override
					public void mouseClicked(MouseEvent e) {
						
						
						if (filename.equals("")) {
							int i = path.lastIndexOf("/");
							
							
							String pastfolder =path.substring(0,i);
							
							try {
								sendToClientOutput(output,"getfile:" + pastfolder,input);
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
							
							
							System.out.println(pastfolder);
							
							
						} else {
							try {
								sendToClientOutput(output, "getfile:" + path + "/" + filename,input);
								
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						
						
					}
				});
				
				if (filename.equals("")) {
					btn.setText("<Back<");
				}
				
				
				framegrid = framegrid + 30;
				panel.add(btn);
				panel.repaint();
			}
			
				
		
		
		} if (msg.substring(0, 12).equals("downloadfile")) {
			
			String path = msg.split(":")[1];
			
			System.out.println(path);
			
			
			
			int i = path.lastIndexOf("/");
			int b = path.length();
			String filename =path.substring(i,b);
			
			
			output.writeUTF("downloadfile");//inicia o void de download file do android
			output.writeUTF(path); //manda qual arquivo
			

			String pathuser = System.getProperty("user.home") + "/Desktop/";
			
			FileOutputStream out = new FileOutputStream(pathuser + filename);
			
			byte[] buffer = new byte[4096];
			
			
			
			long filesize = input.readLong(); // android manda o tamanho do arquivo
			int count = 0;
		
			long length = filesize;
			
			System.out.println(filesize);
			
			long total = 0;
			
			while (total < length && (count = input.read(buffer, 0, length-total > buffer.length ? buffer.length : (int)(length-total))) > 0)
			{
			    out.write(buffer, 0, count);
			    total += count;
			}
			
			
			out.close();
			
		}
		
		
		
		
		else { 
			
			
			output.writeUTF(msg);
			output.flush(); // send the message
			
		}
		
			
		
		
		
		
	}
	
	
	
	public void CreateButton(DataOutputStream output,DataInputStream input,String socketip) {
		
		
		JLabel label2 = new JLabel(socketip);
		//label2.setHorizontalAlignment(SwingConstants.CENTER);
		label2.setFont(new Font("Tahoma", Font.PLAIN, 14));
		label2.setForeground(Color.WHITE);
		label2.setBounds(0, grid, 400, 35);
		//System.out.println("Thread Running");
		frmTeste.getContentPane().add(label2);
		
		
		
		JTextField Field = new JTextField();
		Field.setColumns(10);
		Field.setBounds(400, grid, 86, 20);
		frmTeste.getContentPane().add(Field);
		
		
		
		JButton btn = new JButton("ok");
		btn.setBounds(500, grid, 50, 30);
		btn.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				String text = Field.getText();
				System.out.println(text);
				
				try {
					sendToClientOutput(output,text,input);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			}
		});
		
		frmTeste.getContentPane().add(btn);
		
		
		
		
		
		grid = grid + 40;
		
		frmTeste.repaint();
		
	
		
	}
	
	public  void clientThread(Socket socket) throws IOException {
		
		InputStream inputStream = socket.getInputStream();
        DataInputStream dataInputStream = new DataInputStream(inputStream);
        
        OutputStream outputStream = socket.getOutputStream();
        DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
        

        String socketip = socket.toString();
        
        CreateButton(dataOutputStream,dataInputStream,socketip);
        // read the message from the socket
        //String message = dataInputStream.readUTF();
		
	}
	
	public void serverSocket() throws IOException {
		ServerSocket ss = new ServerSocket(55641);
		
        System.out.println("ServerSocket awaiting connections...");
        
        
        while (true) {
        	
        	Socket socket = ss.accept();
        	
        	String socketName = socket.toString();
        	System.out.println(socketName);
        	
        	Thread thread = new Thread(){
			    public void run(){
			      
					try {
						clientThread(socket);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
			  }};

			  thread.start();
        
            
        }
        
        
	}
	
	
    
	
	
	public static void main(String[] args) {
		
		 

		 //
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					//JFrame.setDefaultLookAndFeelDecorated(true);
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); //design do win
					Janela window = new Janela();
					
					window.frmTeste.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Janela() {
		Thread thread = new Thread(){
		    public void run(){
		      System.out.println("Thread Running");
		      try {
				serverSocket();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    }
		  };
		thread.start();
		initialize();
	}


	
	private void initialize() {
		frmTeste = new JFrame();
		frmTeste.setTitle("Teste");
		frmTeste.getContentPane().setBackground(Color.DARK_GRAY);
		frmTeste.getContentPane().setLayout(null);
		
		
	
		
		
		frmTeste.setSize(1200,600);
		frmTeste.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmTeste.addWindowListener(new WindowAdapter() {


	        @Override
	        public void windowClosing(WindowEvent e) {
	            super.windowClosing(e); 
	            System.out.println("CLOSING");
	            System.exit(0);
	        }
	    });
		
		
		
		
          
        panel.setBounds(600,80,400,400);    
        panel.setBackground(Color.gray);
        
        
        
        
        
        frmTeste.getContentPane().add(panel);
        
        JScrollPane scroller = new JScrollPane(panel);
        
        
        scroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scroller.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        
        scroller.setBounds(600,80,400,400);
        
        panel.setLayout(new WrapLayout());	
        
        
		frmTeste.getContentPane().add(scroller);
      
		
		
		
		
		pathfolder.setText("PATH");
		pathfolder.setBounds(700,0,300,40);
		
		pathfolder.setFont(new Font(pathfolder.getName(), Font.PLAIN, 30));
		
		pathfolder.setForeground(Color.white);
		
		frmTeste.getContentPane().add(pathfolder);
        
            
		
	
	}
	
}


